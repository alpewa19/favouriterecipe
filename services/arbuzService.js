const { Builder, By, until, Key } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');

class ArbuzService {
  constructor(options = {}) {
    this.driver = null;
    this.debug = options.debug || false;
  }

  async initDriver() {
    if (!this.driver) {
      const options = new chrome.Options();
      
      if (!this.debug) {
        options.addArguments('--headless');
      }
      
      options.addArguments('--no-sandbox');
      options.addArguments('--disable-dev-shm-usage');
      options.addArguments('--disable-gpu');
      options.addArguments('--window-size=1920,1080');
      options.addArguments('--disable-web-security');
      options.addArguments('--allow-running-insecure-content');
      options.addArguments('--disable-blink-features=AutomationControlled');
      options.addArguments('--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
      
      this.driver = await new Builder()
        .forBrowser('chrome')
        .setChromeOptions(options)
        .build();
    }
    return this.driver;
  }

  async searchProduct(ingredientName) {
    try {
      await this.initDriver();
      
      const translatedIngredient = translateIngredient(ingredientName);
      console.log(`üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Arbuz.kz: ${ingredientName} -> ${translatedIngredient}`);
      
      // 1. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Arbuz.kz
      console.log('üè† –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
      await this.driver.get('https://arbuz.kz');
      await this.driver.sleep(3000);
      
      // 2. –ò—â–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º placeholder
      console.log('üîç –ò—â–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ "–ò—Å–∫–∞—Ç—å –≤ arbuz"...');
      const searchSelectors = [
        'input[placeholder="–ò—Å–∫–∞—Ç—å –≤ arbuz"]',
        'input[placeholder*="–ò—Å–∫–∞—Ç—å –≤ arbuz"]',
        'input[placeholder*="–∏—Å–∫–∞—Ç—å –≤ arbuz"]',
        'input[placeholder*="arbuz"]',
        'input[name="q"]',
        'input[name="search"]',
        '.search-input',
        '.header-search input[type="text"]',
        'input[type="text"]:first-of-type'
      ];
      
      let searchInput = null;
      for (const selector of searchSelectors) {
        try {
          searchInput = await this.driver.findElement(By.css(selector));
          const placeholder = await searchInput.getAttribute('placeholder');
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞: ${selector} (placeholder: "${placeholder}")`);
          break;
        } catch (error) {
          continue;
        }
      }
      
      if (!searchInput) {
        console.log('‚ùå –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É');
        const searchUrl = `https://arbuz.kz/ru/almaty/search?q=${encodeURIComponent(translatedIngredient)}`;
        return {
          type: 'search',
          url: searchUrl,
          searchUrl: searchUrl,
          translatedIngredient: translatedIngredient,
          originalIngredient: ingredientName,
          store: 'Arbuz.kz',
          reason: 'search_field_not_found'
        };
      }
      
      // 3. –í–≤–æ–¥–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
      console.log(`‚å®Ô∏è –í–≤–æ–¥–∏–º "${translatedIngredient}" –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞...`);
      await searchInput.clear();
      await searchInput.sendKeys(translatedIngredient);
      await this.driver.sleep(1000);
      
      // 4. –ù–∞–∂–∏–º–∞–µ–º Enter –∏–ª–∏ –∏—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
      console.log('üîò –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫...');
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter
        await searchInput.sendKeys(Key.RETURN);
        await this.driver.sleep(3000);
      } catch (error) {
        console.log('‚ö†Ô∏è Enter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞...');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
        const searchButtonSelectors = [
          'button[type="submit"]',
          '.search-button',
          '.header-search button',
          'button[data-testid="search-button"]',
          '.search-form button',
          'form button'
        ];
        
        let searchButton = null;
        for (const selector of searchButtonSelectors) {
          try {
            searchButton = await this.driver.findElement(By.css(selector));
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞: ${selector}`);
            await searchButton.click();
            break;
          } catch (error) {
            continue;
          }
        }
      }
      
      // 5. –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
      console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...');
      await this.driver.sleep(5000);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const currentUrl = await this.driver.getCurrentUrl();
      console.log(`üåê –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);
      
      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      console.log('üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
      let hasRelevantResults = false;
      try {
        const bodyText = await this.driver.findElement(By.css('body')).getText();
        const lowerBodyText = bodyText.toLowerCase();
        const lowerIngredient = translatedIngredient.toLowerCase();
        
        if (lowerBodyText.includes(lowerIngredient)) {
          hasRelevantResults = true;
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞');
        } else {
          console.log('‚ö†Ô∏è –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      }
      
      // 7. –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      console.log('üõçÔ∏è –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
      const productSelectors = [
        'a[href*="/ru/almaty/product/"]',
        'a[href*="/product/"]',
        '.product-card a',
        '.item-card a', 
        '.product-item a',
        '[data-testid="product-link"]',
        '.catalog-item a',
        '.goods-tile a',
        'a[href*="/goods/"]',
        '.product a',
        '.item a',
        'a.product-link',
        'a.item-link'
      ];
      
      let foundProducts = [];
      
      for (const selector of productSelectors) {
        try {
          console.log(`üîç –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
          const products = await this.driver.findElements(By.css(selector));
          console.log(`   –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${products.length}`);
          
          for (let product of products.slice(0, 3)) {
            try {
              const href = await product.getAttribute('href');
              if (href && (href.includes('/product/') || href.includes('/goods/') || href.includes('/item/'))) {
                const fullUrl = href.startsWith('http') ? href : `https://arbuz.kz${href}`;
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
                const linkText = await product.getText();
                console.log(`üîó –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: ${fullUrl} | "${linkText}"`);
                
                foundProducts.push({
                  url: fullUrl,
                  text: linkText
                });
              }
            } catch (error) {
              continue;
            }
          }
          
          if (foundProducts.length > 0) break;
        } catch (error) {
          console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${error.message}`);
          continue;
        }
      }
      
      // 8. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (foundProducts.length > 0 && hasRelevantResults) {
        const firstProduct = foundProducts[0];
        const alternativeUrls = foundProducts.slice(1).map(p => p.url);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: ${firstProduct.url}`);
        
        return {
          type: 'product',
          url: firstProduct.url,
          searchUrl: currentUrl,
          translatedIngredient: translatedIngredient,
          originalIngredient: ingredientName,
          alternativeProducts: alternativeUrls,
          foundProductsCount: foundProducts.length,
          store: 'Arbuz.kz',
          productText: firstProduct.text
        };
      }
      
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –ø–æ–∏—Å–∫–∞
      console.log('üìã –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –ø–æ–∏—Å–∫–∞');
      return {
        type: 'search',
        url: currentUrl,
        searchUrl: currentUrl,
        translatedIngredient: translatedIngredient,
        originalIngredient: ingredientName,
        store: 'Arbuz.kz',
        reason: hasRelevantResults ? 'no_products_found' : 'no_relevant_results'
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ Arbuz.kz:', error.message);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Å—ã–ª–∫—É –ø–æ–∏—Å–∫–∞
      const translatedIngredient = translateIngredient(ingredientName);
      const query = encodeURIComponent(translatedIngredient);
      return {
        type: 'fallback',
        url: `https://arbuz.kz/ru/almaty/search?q=${query}`,
        searchUrl: `https://arbuz.kz/ru/almaty/search?q=${query}`,
        translatedIngredient: translatedIngredient,
        originalIngredient: ingredientName,
        store: 'Arbuz.kz',
        error: error.message
      };
    }
  }

  async searchMultipleIngredients(ingredients) {
    const results = [];
    
    for (const ingredient of ingredients) {
      const result = await this.searchProduct(ingredient);
      results.push({
        ingredient: ingredient,
        ...result
      });
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await this.driver?.sleep(2000);
    }
    
    return results;
  }

  async close() {
    if (this.driver) {
      await this.driver.quit();
      this.driver = null;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
  async getProductInfo(productUrl) {
    try {
      await this.initDriver();
      await this.driver.get(productUrl);
      await this.driver.sleep(3000);
      
      let title = '–¢–æ–≤–∞—Ä';
      let price = '';
      
      try {
        const titleSelectors = [
          'h1',
          '.product-title',
          '.product-name',
          '[data-testid="product-title"]',
          '.goods-tile__title'
        ];
        
        for (const selector of titleSelectors) {
          try {
            const titleElement = await this.driver.findElement(By.css(selector));
            title = await titleElement.getText();
            if (title && title.trim()) break;
          } catch (error) {
            continue;
          }
        }
      } catch (error) {
        console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      try {
        const priceSelectors = [
          '.price',
          '.product-price',
          '.current-price',
          '[data-testid="price"]',
          '.price-current',
          '.goods-tile__price'
        ];
        
        for (const selector of priceSelectors) {
          try {
            const priceElement = await this.driver.findElement(By.css(selector));
            price = await priceElement.getText();
            if (price && price.trim()) break;
          } catch (error) {
            continue;
          }
        }
      } catch (error) {
        console.log('–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      return {
        title: title.trim(),
        price: price.trim(),
        url: productUrl
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ:', error);
      return null;
    }
  }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
const ingredientTranslations = {
  // –ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞
  'chicken': '–∫—É—Ä–∏—Ü–∞',
  'chicken breast': '–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞',
  'chicken thigh': '–∫—É—Ä–∏–Ω–æ–µ –±–µ–¥—Ä–æ',
  'beef': '–≥–æ–≤—è–¥–∏–Ω–∞',
  'ground beef': '–≥–æ–≤—è–∂–∏–π —Ñ–∞—Ä—à',
  'pork': '—Å–≤–∏–Ω–∏–Ω–∞',
  'turkey': '–∏–Ω–¥–µ–π–∫–∞',
  'lamb': '–±–∞—Ä–∞–Ω–∏–Ω–∞',
  'fish': '—Ä—ã–±–∞',
  'salmon': '–ª–æ—Å–æ—Å—å',
  'tuna': '—Ç—É–Ω–µ—Ü',
  'cod': '—Ç—Ä–µ—Å–∫–∞',
  'shrimp': '–∫—Ä–µ–≤–µ—Ç–∫–∏',
  'bacon': '–±–µ–∫–æ–Ω',
  'ham': '–≤–µ—Ç—á–∏–Ω–∞',
  'sausage': '–∫–æ–ª–±–∞—Å–∞',
  
  // –û–≤–æ—â–∏
  'onion': '–ª—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π',
  'onions': '–ª—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π',
  'red onion': '–∫—Ä–∞—Å–Ω—ã–π –ª—É–∫',
  'garlic': '—á–µ—Å–Ω–æ–∫',
  'tomato': '–ø–æ–º–∏–¥–æ—Ä—ã',
  'tomatoes': '–ø–æ–º–∏–¥–æ—Ä—ã',
  'cherry tomatoes': '–ø–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏',
  'potato': '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å',
  'potatoes': '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å',
  'sweet potato': '–±–∞—Ç–∞—Ç',
  'carrot': '–º–æ—Ä–∫–æ–≤—å',
  'carrots': '–º–æ—Ä–∫–æ–≤—å',
  'bell pepper': '–±–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü',
  'red pepper': '–∫—Ä–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ü',
  'green pepper': '–∑–µ–ª–µ–Ω—ã–π –ø–µ—Ä–µ—Ü',
  'pepper': '–ø–µ—Ä–µ—Ü',
  'cucumber': '–æ–≥—É—Ä—Ü—ã',
  'cucumbers': '–æ–≥—É—Ä—Ü—ã',
  'cabbage': '–∫–∞–ø—É—Å—Ç–∞',
  'broccoli': '–±—Ä–æ–∫–∫–æ–ª–∏',
  'cauliflower': '—Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞',
  'spinach': '—à–ø–∏–Ω–∞—Ç',
  'lettuce': '—Å–∞–ª–∞—Ç –ª–∏—Å—Ç–æ–≤–æ–π',
  'mushroom': '–≥—Ä–∏–±—ã',
  'mushrooms': '–≥—Ä–∏–±—ã',
  'white mushrooms': '—à–∞–º–ø–∏–Ω—å–æ–Ω—ã',
  'corn': '–∫—É–∫—É—Ä—É–∑–∞',
  'peas': '–≥–æ—Ä–æ—à–µ–∫',
  'green beans': '—Å—Ç—Ä—É—á–∫–æ–≤–∞—è —Ñ–∞—Å–æ–ª—å',
  'celery': '—Å–µ–ª—å–¥–µ—Ä–µ–π',
  'zucchini': '–∫–∞–±–∞—á–∫–∏',
  'eggplant': '–±–∞–∫–ª–∞–∂–∞–Ω—ã',
  'avocado': '–∞–≤–æ–∫–∞–¥–æ',
  
  // –§—Ä—É–∫—Ç—ã –∏ —è–≥–æ–¥—ã
  'apple': '—è–±–ª–æ–∫–∏',
  'apples': '—è–±–ª–æ–∫–∏',
  'banana': '–±–∞–Ω–∞–Ω—ã',
  'bananas': '–±–∞–Ω–∞–Ω—ã',
  'orange': '–∞–ø–µ–ª—å—Å–∏–Ω—ã',
  'oranges': '–∞–ø–µ–ª—å—Å–∏–Ω—ã',
  'lemon': '–ª–∏–º–æ–Ω—ã',
  'lemons': '–ª–∏–º–æ–Ω—ã',
  'lime': '–ª–∞–π–º',
  'strawberry': '–∫–ª—É–±–Ω–∏–∫–∞',
  'strawberries': '–∫–ª—É–±–Ω–∏–∫–∞',
  'blueberries': '—á–µ—Ä–Ω–∏–∫–∞',
  'raspberries': '–º–∞–ª–∏–Ω–∞',
  'grape': '–≤–∏–Ω–æ–≥—Ä–∞–¥',
  'grapes': '–≤–∏–Ω–æ–≥—Ä–∞–¥',
  'pineapple': '–∞–Ω–∞–Ω–∞—Å',
  'mango': '–º–∞–Ω–≥–æ',
  'kiwi': '–∫–∏–≤–∏',
  
  // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
  'milk': '–º–æ–ª–æ–∫–æ',
  'whole milk': '–º–æ–ª–æ–∫–æ —Ü–µ–ª—å–Ω–æ–µ',
  'skim milk': '–æ–±–µ–∑–∂–∏—Ä–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ',
  'cheese': '—Å—ã—Ä',
  'cheddar cheese': '—Å—ã—Ä —á–µ–¥–¥–µ—Ä',
  'mozzarella': '–º–æ—Ü–∞—Ä–µ–ª–ª–∞',
  'parmesan': '–ø–∞—Ä–º–µ–∑–∞–Ω',
  'cottage cheese': '—Ç–≤–æ—Ä–æ–≥',
  'cream cheese': '—Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä',
  'butter': '–º–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ',
  'cream': '—Å–ª–∏–≤–∫–∏',
  'heavy cream': '–∂–∏—Ä–Ω—ã–µ —Å–ª–∏–≤–∫–∏',
  'sour cream': '—Å–º–µ—Ç–∞–Ω–∞',
  'yogurt': '–π–æ–≥—É—Ä—Ç',
  'greek yogurt': '–≥—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç',
  'egg': '—è–π—Ü–∞',
  'eggs': '—è–π—Ü–∞',
  'egg whites': '—è–∏—á–Ω—ã–µ –±–µ–ª–∫–∏',
  
  // –ö—Ä—É–ø—ã –∏ –∑–µ—Ä–Ω–æ–≤—ã–µ
  'rice': '—Ä–∏—Å',
  'white rice': '–±–µ–ª—ã–π —Ä–∏—Å',
  'brown rice': '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ä–∏—Å',
  'pasta': '–º–∞–∫–∞—Ä–æ–Ω—ã',
  'spaghetti': '—Å–ø–∞–≥–µ—Ç—Ç–∏',
  'penne': '–ø–µ–Ω–Ω–µ',
  'bread': '—Ö–ª–µ–±',
  'white bread': '–±–µ–ª—ã–π —Ö–ª–µ–±',
  'whole wheat bread': '—Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π —Ö–ª–µ–±',
  'flour': '–º—É–∫–∞',
  'all-purpose flour': '–º—É–∫–∞ –ø—à–µ–Ω–∏—á–Ω–∞—è',
  'whole wheat flour': '—Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–∞—è –º—É–∫–∞',
  'oats': '–æ–≤—Å—è–Ω–∫–∞',
  'rolled oats': '–æ–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è',
  'quinoa': '–∫–∏–Ω–æ–∞',
  'barley': '—è—á–º–µ–Ω—å',
  'buckwheat': '–≥—Ä–µ—á–∫–∞',
  
  // –ë–æ–±–æ–≤—ã–µ –∏ –æ—Ä–µ—Ö–∏
  'beans': '—Ñ–∞—Å–æ–ª—å',
  'black beans': '—á–µ—Ä–Ω–∞—è —Ñ–∞—Å–æ–ª—å',
  'kidney beans': '–∫—Ä–∞—Å–Ω–∞—è —Ñ–∞—Å–æ–ª—å',
  'chickpeas': '–Ω—É—Ç',
  'lentils': '—á–µ—á–µ–≤–∏—Ü–∞',
  'almonds': '–º–∏–Ω–¥–∞–ª—å',
  'walnuts': '–≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏',
  'peanuts': '–∞—Ä–∞—Ö–∏—Å',
  'cashews': '–∫–µ—à—å—é',
  'pistachios': '—Ñ–∏—Å—Ç–∞—à–∫–∏',
  
  // –°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã
  'salt': '—Å–æ–ª—å',
  'black pepper': '—á–µ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ü',
  'white pepper': '–±–µ–ª—ã–π –ø–µ—Ä–µ—Ü',
  'paprika': '–ø–∞–ø—Ä–∏–∫–∞',
  'cumin': '–∑–∏—Ä–∞',
  'oregano': '–æ—Ä–µ–≥–∞–Ω–æ',
  'basil': '–±–∞–∑–∏–ª–∏–∫',
  'thyme': '—Ç–∏–º—å—è–Ω',
  'rosemary': '—Ä–æ–∑–º–∞—Ä–∏–Ω',
  'parsley': '–ø–µ—Ç—Ä—É—à–∫–∞',
  'dill': '—É–∫—Ä–æ–ø',
  'cilantro': '–∫–∏–Ω–∑–∞',
  'bay leaves': '–ª–∞–≤—Ä–æ–≤—ã–π –ª–∏—Å—Ç',
  'cinnamon': '–∫–æ—Ä–∏—Ü–∞',
  'nutmeg': '–º—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Ö',
  'ginger': '–∏–º–±–∏—Ä—å',
  'turmeric': '–∫—É—Ä–∫—É–º–∞',
  'curry powder': '–∫–∞—Ä—Ä–∏',
  'chili powder': '–º–æ–ª–æ—Ç—ã–π —á–∏–ª–∏',
  'red pepper flakes': '—Ö–ª–æ–ø—å—è –∫—Ä–∞—Å–Ω–æ–≥–æ –ø–µ—Ä—Ü–∞',
  
  // –ú–∞—Å–ª–∞ –∏ –∂–∏—Ä—ã
  'oil': '—Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ',
  'olive oil': '–æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ',
  'extra virgin olive oil': '–æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ extra virgin',
  'vegetable oil': '—Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ',
  'canola oil': '—Ä–∞–ø—Å–æ–≤–æ–µ –º–∞—Å–ª–æ',
  'coconut oil': '–∫–æ–∫–æ—Å–æ–≤–æ–µ –º–∞—Å–ª–æ',
  'sesame oil': '–∫—É–Ω–∂—É—Ç–Ω–æ–µ –º–∞—Å–ª–æ',
  
  // –°–æ—É—Å—ã –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã
  'soy sauce': '—Å–æ–µ–≤—ã–π —Å–æ—É—Å',
  'worcestershire sauce': '–≤—É—Å—Ç–µ—Ä—Å–∫–∏–π —Å–æ—É—Å',
  'hot sauce': '–æ—Å—Ç—Ä—ã–π —Å–æ—É—Å',
  'ketchup': '–∫–µ—Ç—á—É–ø',
  'mustard': '–≥–æ—Ä—á–∏—Ü–∞',
  'mayonnaise': '–º–∞–π–æ–Ω–µ–∑',
  'vinegar': '—É–∫—Å—É—Å',
  'balsamic vinegar': '–±–∞–ª—å–∑–∞–º–∏—á–µ—Å–∫–∏–π —É–∫—Å—É—Å',
  'apple cider vinegar': '—è–±–ª–æ—á–Ω—ã–π —É–∫—Å—É—Å',
  
  // –°–ª–∞–¥–æ—Å—Ç–∏ –∏ –≤—ã–ø–µ—á–∫–∞
  'sugar': '—Å–∞—Ö–∞—Ä',
  'brown sugar': '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —Å–∞—Ö–∞—Ä',
  'powdered sugar': '—Å–∞—Ö–∞—Ä–Ω–∞—è –ø—É–¥—Ä–∞',
  'honey': '–º–µ–¥',
  'maple syrup': '–∫–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø',
  'vanilla': '–≤–∞–Ω–∏–ª—å',
  'vanilla extract': '–≤–∞–Ω–∏–ª—å–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç',
  'chocolate': '—à–æ–∫–æ–ª–∞–¥',
  'dark chocolate': '—Ç–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥',
  'cocoa powder': '–∫–∞–∫–∞–æ –ø–æ—Ä–æ—à–æ–∫',
  'baking powder': '—Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å',
  'baking soda': '—Å–æ–¥–∞',
  
  // –ù–∞–ø–∏—Ç–∫–∏
  'wine': '–≤–∏–Ω–æ',
  'white wine': '–±–µ–ª–æ–µ –≤–∏–Ω–æ',
  'red wine': '–∫—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ',
  'beer': '–ø–∏–≤–æ',
  'water': '–≤–æ–¥–∞',
  'chicken stock': '–∫—É—Ä–∏–Ω—ã–π –±—É–ª—å–æ–Ω',
  'beef stock': '–≥–æ–≤—è–∂–∏–π –±—É–ª—å–æ–Ω',
  'vegetable stock': '–æ–≤–æ—â–Ω–æ–π –±—É–ª—å–æ–Ω',
  'broth': '–±—É–ª—å–æ–Ω',
  
  // –ö–æ–Ω—Å–µ—Ä–≤—ã
  'canned tomatoes': '–∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–º–∏–¥–æ—Ä—ã',
  'tomato paste': '—Ç–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞',
  'tomato sauce': '—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å',
  'coconut milk': '–∫–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ',
  'canned beans': '–∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∞—Å–æ–ª—å'
};

function translateIngredient(ingredient) {
  const lower = ingredient.toLowerCase().trim();
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –∏ —Å–∏–º–≤–æ–ª—ã
  const cleanIngredient = lower
    .replace(/\(.*?\)/g, '') // —É–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    .replace(/,.*$/, '') // —É–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—É—é –∏ –≤—Å—ë –ø–æ—Å–ª–µ –Ω–µ—ë
    .replace(/\s+/g, ' ') // –∑–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –æ–¥–Ω–∏–º
    .trim();
  
  // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (ingredientTranslations[cleanIngredient]) {
    return ingredientTranslations[cleanIngredient];
  }
  
  // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å–Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
  const sortedKeys = Object.keys(ingredientTranslations).sort((a, b) => b.length - a.length);
  
  for (const english of sortedKeys) {
    if (cleanIngredient.includes(english) || english.includes(cleanIngredient)) {
      return ingredientTranslations[english];
    }
  }
  
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
  return ingredient;
}

module.exports = { ArbuzService, translateIngredient }; 